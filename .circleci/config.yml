version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
       workflow_id:
          type: string
          description: The ID of the workflow for which to delete the stacks.  
    steps:
      - run:
          name: Destroy environments <<parameters.workflow_id>>
          when: on_fail
          command: |
            echo "Destroying environment" : <<parameters.workflow_id>>
            aws s3 rm s3://udapeople-habib-bucket-<<parameters.workflow_id>>-- recursive
            aws cloudformation delete-stack --stack-name  "udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name "udapeople-frontend<<parameters.workflow_id>>
            
  revert-migrations:
    description: Revert the last migration 
    parameters:
      workflow_id:
          type: string
            
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            
            SUCCESS = $(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_<<parameters.workflow_id>>)
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm install
            npm run migration:revert
            fi
    # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
    #  Add revert code here. You can find this in the Getting Started section.
          #    exit 1        
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
              cd frontend
              npm install
              npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
              cd backend
              npm install
              npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
              cd frontend 
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command:   yum update -y &&  yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople\
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:  
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --region us-east-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - slack/notify:
          channel:  $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
          #message: "Job failed with error: {{ .FailureReason }} please help me"
        
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ef:7d:e5:f5:42:c3:a5:41:02:f3:1f:34:65:a7:2c:cc"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add tar gzip
            apk add --update py-pip
            pip install awscli 
            apk add --update ansible
      - run:
          name: Configure server
          command: |
             cd .circleci/ansible
             ansible-playbook -i inventory.txt configure-server.yml
      - slack/notify:
          channel:  $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
          #message: "configure-infrastructure Job failed with error: {{ .FailureReason }} please help me"
        
       # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat  migrations_dump.txt
      - run:
          name: Send migration results to KVDB
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
            then
            curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' 
            fi
            
      - slack/notify:
          channel:  $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
    # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
           #curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
           # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
          
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip curl
          command: |
            yum install -y tar gzip curl

      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies for python3  
          command: |
            # your code here
            yum update -y
            yum install -y python3
      # - run:
      #     name: Install dependencies for ansible
      #     command: |
      #       yum install -y ansible
      - run:
          name: Install dependencies for nodejs  # yum install -y nodejs    
          command: |
            
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs
            node -v
            npm -v

      # - run:
      #     name: Install dependencies for awscli  
      #     command: |
      #       yum install -y  awscli
      - run:
          name: Get backend url
          command: |
            
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm audit fix
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}        

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["ef:7d:e5:f5:42:c3:a5:41:02:f3:1f:34:65:a7:2c:cc"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here  
            apk update          
            apk add tar gzip
            apk add --update py-pip
            pip install awscli 
            apk add --update ansible
            apk add --no-cache curl
            apk add --update nodejs npm
            apk add jq curl
      #curl -sL https://deb.nodesource.com/setup_13.x | bash apk add nodejs
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd  .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      - slack/notify:
          channel:  $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm
            apk add jq curl
            apk add --update py-pip
            pip install awscli 
      #apk add --no-cache curl
      - run:
          name: Get backend url
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
#       # Here's where you will add some code to rollback on failure  
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]